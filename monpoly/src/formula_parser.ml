type token =
  | FALSE
  | TRUE
  | LPA
  | RPA
  | LSB
  | RSB
  | COM
  | SC
  | DOT
  | QM
  | LD
  | LESSEQ
  | EQ
  | LESS
  | GTR
  | GTREQ
  | STAR
  | LARROW
  | PLUS
  | MINUS
  | SLASH
  | MOD
  | F2I
  | I2F
  | STR of (string)
  | STR_CST of (string)
  | INT of (float)
  | RAT of (float)
  | TU of (int*char)
  | LET
  | IN
  | NOT
  | AND
  | OR
  | IMPL
  | EQUIV
  | EX
  | FA
  | PREV
  | NEXT
  | EVENTUALLY
  | ONCE
  | ALWAYS
  | PAST_ALWAYS
  | SINCE
  | UNTIL
  | BAR
  | FREX
  | PREX
  | CNT
  | MIN
  | MAX
  | SUM
  | AVG
  | MED
  | END
  | EOF

open Parsing;;
let _ = parse_error;;
# 43 "formula_parser.mly"
  open Predicate
  open MFOTL
  open Misc

  let f str =
    if Misc.debugging Dbg_formula then
      Printf.printf "[Formula_parser] %s\t\n" str
    else
      ()

  let var_cnt = ref 0

  (* by default, the time unit is of 1 second *)
  let timeunits (n,c) =
    let d =
      match c with
      | 'd' -> 24 * 60 * 60
      | 'h' -> 60 * 60
      | 'm' -> 60
      | 's' -> 1
      | _ -> failwith "[Formula_parser.time_units] unrecognized time unit"
    in
    float_of_int (d * n)

  let rec exists varlist f =
    match varlist with
    | [] -> failwith "[Formula_parser.exists] no variables"
    | vl -> Exists (vl, f)

  let rec forall varlist f =
    match varlist with
    | [] -> failwith "[Formula_parser.forall] no variables"
    | vl -> ForAll (vl, f)


  let dfintv = (MFOTL.CBnd 0., MFOTL.Inf)

  let strip str =
    let len = String.length str in
    if str.[0] = '\"' && str.[len-1] = '\"' then
      String.sub str 1 (len-2)
    else
      str

  let get_cst str =
    try
      Int (int_of_string str)
    with _ -> Str (strip str)

  let check f =
    let _ =
      match f with
      | Equal (t1,t2)
      | Less (t1,t2)
      | LessEq (t1,t2)
        -> (
          match t1,t2 with
          | Cst (Int _), Cst (Str _)
          | Cst (Str _), Cst (Int _) ->
             failwith "[Formula_parser.check] \
              Comparisons should be between constants of the same type"
          | _ -> ()
        )
      | _ -> failwith "[Formula_parser.check] internal error"
    in f

  let add_ex p =
    let args = Predicate.get_args p in
    let rec proc = function
      | [] -> []
      | (Var v) :: rest when v.[0] = '_' -> v :: (proc rest)
      | _ :: rest -> proc rest
    in
    let vl = proc args in
    let pred = Pred p in
    if vl <> [] then Exists (vl, pred) else pred

  let strip s =
    let len = String.length s in
    assert(s.[0] = '\"' && s.[len-1] = '\"');
    String.sub s 1 (len-2)


  (* The rule is: var LARROW aggreg var SC varlist formula  *)
  let aggreg res_var op agg_var groupby_vars f =
    let free_vars = MFOTL.free_vars f in
    let msg b x =
      let kind = if b then "Aggregation" else "Group-by" in
      Printf.sprintf "[Formula_parser.aggreg] %s variable %s is not a free variable in the aggregated formula" kind x
    in
    if not (List.mem agg_var free_vars) then
      failwith (msg true agg_var)
    else
      begin
        List.iter (fun gby_var ->
          if not (List.mem gby_var free_vars) then
            failwith (msg false gby_var)
        ) groupby_vars;
        Aggreg ((TSymb (TAny, 0)),res_var, op, agg_var, groupby_vars, f)
      end

# 165 "formula_parser.ml"
let yytransl_const = [|
  257 (* FALSE *);
  258 (* TRUE *);
  259 (* LPA *);
  260 (* RPA *);
  261 (* LSB *);
  262 (* RSB *);
  263 (* COM *);
  264 (* SC *);
  265 (* DOT *);
  266 (* QM *);
  267 (* LD *);
  268 (* LESSEQ *);
  269 (* EQ *);
  270 (* LESS *);
  271 (* GTR *);
  272 (* GTREQ *);
  273 (* STAR *);
  274 (* LARROW *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* SLASH *);
  278 (* MOD *);
  279 (* F2I *);
  280 (* I2F *);
  286 (* LET *);
  287 (* IN *);
  288 (* NOT *);
  289 (* AND *);
  290 (* OR *);
  291 (* IMPL *);
  292 (* EQUIV *);
  293 (* EX *);
  294 (* FA *);
  295 (* PREV *);
  296 (* NEXT *);
  297 (* EVENTUALLY *);
  298 (* ONCE *);
  299 (* ALWAYS *);
  300 (* PAST_ALWAYS *);
  301 (* SINCE *);
  302 (* UNTIL *);
  303 (* BAR *);
  304 (* FREX *);
  305 (* PREX *);
  306 (* CNT *);
  307 (* MIN *);
  308 (* MAX *);
  309 (* SUM *);
  310 (* AVG *);
  311 (* MED *);
  312 (* END *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  281 (* STR *);
  282 (* STR_CST *);
  283 (* INT *);
  284 (* RAT *);
  285 (* TU *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\006\000\006\000\006\000\
\006\000\006\000\006\000\007\000\010\000\010\000\011\000\011\000\
\011\000\011\000\012\000\012\000\002\000\013\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\015\000\015\000\015\000\014\000\014\000\014\000\004\000\
\004\000\004\000\005\000\005\000\000\000"

let yylen = "\002\000\
\003\000\001\000\001\000\001\000\006\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\004\000\
\004\000\005\000\007\000\003\000\002\000\003\000\002\000\003\000\
\002\000\003\000\002\000\003\000\002\000\003\000\002\000\004\000\
\003\000\004\000\003\000\003\000\002\000\003\000\002\000\003\000\
\001\000\001\000\002\000\002\000\003\000\002\000\003\000\001\000\
\001\000\002\000\002\000\003\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\001\000\001\000\004\000\001\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\004\000\004\000\001\000\
\001\000\001\000\001\000\001\000\003\000\001\000\000\000\003\000\
\001\000\000\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\091\000\000\000\000\000\
\000\000\000\000\084\000\082\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\080\000\000\000\
\000\000\000\000\092\000\000\000\081\000\000\000\000\000\070\000\
\000\000\015\000\000\000\089\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\061\000\068\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\053\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\000\000\000\000\000\000\
\078\000\079\000\000\000\088\000\000\000\000\000\000\000\060\000\
\000\000\040\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\065\000\066\000\063\000\064\000\000\000\
\000\000\085\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\063\000\027\000\028\000\043\000\029\000\150\000\049\000\117\000\
\125\000\050\000\160\000\100\000\030\000\152\000\031\000"

let yysindex = "\015\000\
\245\010\000\000\000\000\000\000\245\010\000\000\089\002\020\255\
\026\255\000\000\000\000\000\000\000\000\009\255\245\010\002\255\
\002\255\237\009\237\009\237\009\237\009\237\009\237\009\051\009\
\100\009\009\002\000\000\211\007\029\255\035\255\000\000\101\255\
\158\007\089\002\000\000\022\255\000\000\089\002\089\002\000\000\
\048\255\000\000\045\255\000\000\049\255\025\010\037\255\043\255\
\245\010\060\255\043\255\245\010\043\255\245\010\043\255\245\010\
\043\255\245\010\043\255\245\010\144\009\000\000\071\255\069\010\
\126\008\188\009\000\000\081\255\113\010\170\008\245\010\245\010\
\245\010\245\010\237\009\237\009\089\002\089\002\089\002\089\002\
\089\002\089\002\089\002\089\002\089\002\089\002\164\000\089\002\
\000\000\000\000\011\255\161\255\233\255\245\010\002\255\245\010\
\245\010\000\000\000\000\000\000\000\000\000\000\043\255\008\255\
\043\255\043\255\043\255\043\255\043\255\069\010\093\255\187\255\
\000\000\126\008\000\000\069\010\077\011\113\010\139\255\082\008\
\000\000\170\008\000\000\113\010\110\011\000\000\059\255\067\255\
\067\255\009\002\245\010\009\002\245\010\065\255\065\255\065\255\
\065\255\065\255\022\255\019\255\019\255\065\255\065\255\000\000\
\000\000\000\000\000\000\000\000\000\000\002\255\041\001\106\255\
\000\000\000\000\009\001\000\000\043\255\043\255\102\255\000\000\
\109\255\000\000\077\011\000\000\110\011\009\002\009\002\157\010\
\089\002\000\000\245\010\000\000\000\000\000\000\000\000\002\255\
\009\002\000\000\009\002\201\010\009\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\008\000\000\000\000\000\000\000\000\000\000\107\255\
\107\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\118\000\000\000\000\000\135\011\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\003\
\000\000\000\000\084\003\000\000\142\003\000\000\191\003\000\000\
\240\003\000\000\033\004\000\000\000\000\000\000\048\001\000\000\
\172\007\000\000\000\000\097\001\000\000\205\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\097\007\000\000\000\000\000\000\000\000\082\004\000\000\
\131\004\189\004\238\004\031\005\080\005\000\000\214\008\000\000\
\000\000\212\007\000\000\000\000\050\007\000\000\002\009\000\000\
\000\000\002\008\000\000\000\000\093\007\000\000\146\001\195\001\
\244\001\236\005\000\000\029\006\000\000\037\002\095\002\144\002\
\193\002\242\002\050\000\099\000\148\000\197\000\246\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\255\000\000\
\000\000\000\000\000\000\000\000\129\005\178\005\000\000\000\000\
\000\000\000\000\111\007\000\000\156\007\078\006\127\006\000\000\
\116\255\000\000\000\000\000\000\000\000\000\000\000\000\033\011\
\176\006\000\000\225\006\000\000\025\007"

let yygindex = "\000\000\
\255\255\111\000\249\008\242\255\073\000\000\000\243\255\234\255\
\236\255\000\000\000\000\235\255\000\000\218\255\000\000"

let yytablesize = 3231
let yytable = "\026\000\
\076\000\065\000\045\000\032\000\070\000\052\000\054\000\056\000\
\058\000\060\000\064\000\069\000\006\000\042\000\090\000\001\000\
\048\000\051\000\053\000\055\000\057\000\059\000\038\000\068\000\
\159\000\102\000\035\000\082\000\039\000\083\000\084\000\085\000\
\086\000\040\000\101\000\082\000\099\000\088\000\112\000\085\000\
\086\000\114\000\085\000\086\000\032\000\120\000\087\000\103\000\
\122\000\073\000\105\000\095\000\106\000\096\000\107\000\095\000\
\108\000\097\000\109\000\111\000\094\000\131\000\133\000\101\000\
\119\000\099\000\104\000\068\000\068\000\126\000\127\000\128\000\
\129\000\130\000\132\000\071\000\072\000\073\000\074\000\037\000\
\113\000\082\000\161\000\083\000\084\000\085\000\086\000\112\000\
\044\000\044\000\121\000\071\000\155\000\163\000\157\000\158\000\
\089\000\120\000\071\000\071\000\072\000\073\000\113\000\165\000\
\089\000\172\000\037\000\173\000\111\000\170\000\037\000\037\000\
\174\000\090\000\175\000\090\000\119\000\093\000\068\000\087\000\
\068\000\086\000\068\000\068\000\041\000\071\000\072\000\073\000\
\074\000\166\000\178\000\167\000\000\000\071\000\072\000\073\000\
\074\000\075\000\076\000\000\000\000\000\000\000\089\000\000\000\
\000\000\075\000\076\000\072\000\121\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
\037\000\180\000\000\000\068\000\153\000\000\000\177\000\156\000\
\000\000\179\000\000\000\071\000\072\000\073\000\074\000\000\000\
\000\000\082\000\181\000\083\000\084\000\085\000\086\000\075\000\
\076\000\000\000\000\000\003\000\004\000\110\000\162\000\000\000\
\000\000\000\000\000\000\062\000\074\000\006\000\000\000\000\000\
\000\000\000\000\000\000\115\000\000\000\116\000\007\000\000\000\
\000\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\014\000\000\000\015\000\000\000\000\000\000\000\168\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\000\000\000\000\024\000\025\000\154\000\000\000\000\000\000\000\
\000\000\037\000\000\000\000\000\000\000\075\000\000\000\000\000\
\044\000\082\000\000\000\083\000\084\000\085\000\086\000\000\000\
\000\000\076\000\076\000\076\000\076\000\000\000\000\000\076\000\
\000\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\000\000\076\000\076\000\000\000\000\000\076\000\
\076\000\076\000\076\000\076\000\076\000\000\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\042\000\
\076\000\076\000\073\000\073\000\073\000\073\000\000\000\000\000\
\073\000\000\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\000\000\073\000\073\000\000\000\000\000\
\073\000\073\000\073\000\073\000\073\000\073\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\049\000\073\000\073\000\071\000\071\000\071\000\071\000\000\000\
\000\000\071\000\000\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\000\000\000\000\071\000\071\000\000\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\013\000\071\000\071\000\072\000\072\000\072\000\072\000\
\000\000\000\000\072\000\000\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\000\000\000\000\072\000\072\000\
\000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\000\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\012\000\072\000\072\000\074\000\074\000\074\000\
\074\000\000\000\000\000\074\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\144\000\145\000\146\000\
\147\000\148\000\149\000\074\000\074\000\074\000\074\000\074\000\
\074\000\000\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\011\000\074\000\074\000\075\000\075\000\
\075\000\075\000\000\000\000\000\075\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\075\000\075\000\075\000\
\075\000\075\000\000\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\007\000\075\000\075\000\171\000\
\000\000\071\000\072\000\073\000\074\000\000\000\000\000\169\000\
\042\000\042\000\042\000\042\000\000\000\075\000\076\000\000\000\
\042\000\082\000\042\000\083\000\084\000\085\000\086\000\000\000\
\042\000\000\000\042\000\042\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\006\000\042\000\
\042\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
\000\000\049\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\049\000\049\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\008\000\
\049\000\049\000\013\000\013\000\013\000\013\000\000\000\000\000\
\000\000\000\000\013\000\013\000\013\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\013\000\013\000\000\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\013\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\009\000\013\000\013\000\012\000\012\000\012\000\012\000\000\000\
\000\000\000\000\000\000\012\000\012\000\012\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\012\000\012\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\010\000\012\000\012\000\011\000\011\000\011\000\011\000\
\000\000\000\000\000\000\000\000\011\000\011\000\011\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\011\000\011\000\
\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\011\000\011\000\011\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\021\000\011\000\011\000\007\000\007\000\007\000\
\007\000\071\000\072\000\073\000\074\000\007\000\007\000\007\000\
\000\000\000\000\000\000\000\000\000\000\075\000\076\000\000\000\
\000\000\000\000\000\000\007\000\007\000\007\000\007\000\007\000\
\007\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\023\000\007\000\007\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\006\000\
\006\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\
\006\000\006\000\000\000\000\000\007\000\000\000\000\000\008\000\
\009\000\035\000\011\000\012\000\013\000\006\000\006\000\006\000\
\006\000\006\000\006\000\000\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\025\000\006\000\006\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
\008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\000\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\027\000\008\000\
\008\000\009\000\009\000\009\000\009\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\029\000\
\009\000\009\000\010\000\010\000\010\000\010\000\000\000\000\000\
\000\000\000\000\010\000\010\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\031\000\010\000\010\000\021\000\021\000\021\000\021\000\000\000\
\000\000\000\000\000\000\021\000\021\000\021\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
\021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\020\000\021\000\021\000\023\000\023\000\023\000\023\000\
\000\000\000\000\000\000\000\000\023\000\023\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\023\000\023\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\022\000\023\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\025\000\025\000\000\000\000\000\000\000\000\000\025\000\025\000\
\025\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\025\000\025\000\000\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\000\000\025\000\025\000\025\000\000\000\000\000\
\000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\024\000\025\000\025\000\027\000\
\027\000\027\000\027\000\000\000\000\000\000\000\000\000\027\000\
\027\000\027\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\027\000\027\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\027\000\027\000\027\000\000\000\
\000\000\000\000\000\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\026\000\027\000\027\000\
\029\000\029\000\029\000\029\000\000\000\000\000\000\000\000\000\
\029\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\029\000\029\000\000\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\000\000\029\000\029\000\029\000\
\000\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\028\000\029\000\
\029\000\031\000\031\000\031\000\031\000\000\000\000\000\000\000\
\000\000\031\000\031\000\031\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\031\000\031\000\000\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\031\000\031\000\
\031\000\000\000\000\000\000\000\000\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\030\000\
\031\000\031\000\020\000\020\000\020\000\020\000\000\000\000\000\
\000\000\000\000\020\000\020\000\020\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\020\000\020\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\000\000\000\000\000\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\016\000\020\000\020\000\022\000\022\000\022\000\022\000\000\000\
\000\000\000\000\000\000\022\000\022\000\022\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\022\000\022\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\022\000\022\000\000\000\000\000\000\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\017\000\022\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\024\000\024\000\
\024\000\000\000\000\000\000\000\000\000\024\000\024\000\024\000\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\024\000\
\024\000\000\000\000\000\024\000\024\000\024\000\024\000\024\000\
\024\000\000\000\024\000\024\000\024\000\000\000\000\000\000\000\
\000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\033\000\024\000\024\000\026\000\026\000\
\026\000\026\000\000\000\000\000\000\000\000\000\026\000\026\000\
\026\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\026\000\026\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\000\000\026\000\026\000\026\000\000\000\000\000\
\000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\035\000\026\000\026\000\028\000\
\028\000\028\000\028\000\000\000\000\000\000\000\000\000\028\000\
\028\000\028\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\028\000\028\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\028\000\028\000\028\000\000\000\
\000\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\032\000\028\000\028\000\
\030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\
\030\000\030\000\030\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\030\000\030\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\
\000\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\034\000\030\000\
\030\000\016\000\016\000\016\000\016\000\000\000\000\000\000\000\
\000\000\016\000\016\000\016\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\016\000\016\000\000\000\000\000\016\000\
\016\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\016\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\018\000\
\016\000\016\000\017\000\017\000\017\000\017\000\000\000\000\000\
\000\000\000\000\017\000\017\000\017\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\017\000\017\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\017\000\000\000\000\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\005\000\017\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\033\000\033\000\033\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\033\000\033\000\
\000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\019\000\000\000\000\000\033\000\033\000\035\000\035\000\035\000\
\035\000\000\000\000\000\000\000\000\000\035\000\035\000\035\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\035\000\
\035\000\044\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\035\000\035\000\035\000\000\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\000\000\035\000\035\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\032\000\032\000\
\032\000\000\000\000\000\000\000\051\000\000\000\032\000\000\000\
\032\000\032\000\000\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\032\000\032\000\032\000\045\000\000\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\032\000\032\000\034\000\
\034\000\034\000\034\000\000\000\000\000\000\000\000\000\034\000\
\034\000\034\000\000\000\000\000\000\000\000\000\000\000\034\000\
\000\000\034\000\034\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\052\000\034\000\034\000\034\000\000\000\
\000\000\000\000\000\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\037\000\000\000\000\000\034\000\034\000\
\018\000\018\000\018\000\018\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\018\000\018\000\000\000\000\000\018\000\018\000\
\018\000\018\000\018\000\018\000\039\000\018\000\018\000\018\000\
\000\000\000\000\000\000\036\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\000\000\000\000\018\000\
\018\000\005\000\005\000\005\000\005\000\000\000\000\000\000\000\
\000\000\005\000\005\000\005\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\005\000\005\000\000\000\000\000\005\000\
\005\000\005\000\005\000\005\000\005\000\000\000\005\000\005\000\
\005\000\038\000\000\000\000\000\000\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\000\000\000\000\000\000\
\005\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\019\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\019\000\019\000\019\000\019\000\019\000\044\000\019\000\019\000\
\019\000\000\000\000\000\044\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\000\000\000\000\000\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\051\000\000\000\000\000\000\000\082\000\000\000\051\000\068\000\
\000\000\000\000\000\000\000\000\082\000\082\000\082\000\082\000\
\082\000\082\000\045\000\082\000\082\000\082\000\082\000\000\000\
\045\000\000\000\000\000\051\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\000\000\000\000\045\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\052\000\
\000\000\090\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\077\000\078\000\079\000\080\000\081\000\082\000\037\000\
\083\000\084\000\085\000\086\000\000\000\037\000\000\000\000\000\
\000\000\000\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\037\000\000\000\037\000\037\000\037\000\037\000\
\039\000\000\000\000\000\000\000\000\000\000\000\039\000\036\000\
\037\000\037\000\000\000\000\000\000\000\036\000\077\000\078\000\
\079\000\080\000\081\000\082\000\000\000\083\000\084\000\085\000\
\086\000\000\000\000\000\039\000\000\000\039\000\039\000\039\000\
\039\000\000\000\036\000\000\000\036\000\036\000\036\000\036\000\
\000\000\039\000\039\000\000\000\000\000\033\000\000\000\036\000\
\036\000\036\000\000\000\070\000\092\000\038\000\000\000\000\000\
\000\000\000\000\000\000\038\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\000\000\
\000\000\000\000\091\000\000\000\000\000\000\000\092\000\093\000\
\038\000\000\000\038\000\038\000\038\000\038\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\143\000\000\000\
\151\000\000\000\003\000\004\000\118\000\164\000\000\000\000\000\
\000\000\000\000\067\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\123\000\000\000\124\000\007\000\033\000\000\000\
\008\000\009\000\010\000\011\000\012\000\013\000\033\000\014\000\
\000\000\015\000\000\000\000\000\000\000\000\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\110\000\024\000\025\000\000\000\000\000\000\000\062\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\115\000\000\000\
\116\000\007\000\000\000\000\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\014\000\000\000\015\000\000\000\000\000\
\000\000\151\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\003\000\004\000\118\000\024\000\025\000\000\000\
\000\000\000\000\067\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\123\000\000\000\124\000\007\000\000\000\000\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\000\000\015\000\000\000\000\000\000\000\000\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\042\000\042\000\
\042\000\024\000\025\000\000\000\000\000\000\000\042\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\000\000\042\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\049\000\049\000\049\000\042\000\042\000\000\000\
\000\000\000\000\049\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\049\000\000\000\049\000\049\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\
\000\000\049\000\000\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\000\000\049\000\049\000\003\000\004\000\061\000\000\000\047\000\
\000\000\000\000\000\000\062\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\014\000\000\000\015\000\000\000\000\000\000\000\000\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\000\000\000\000\024\000\025\000\003\000\004\000\066\000\000\000\
\047\000\000\000\000\000\000\000\067\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\008\000\009\000\010\000\011\000\012\000\013\000\
\000\000\014\000\000\000\015\000\000\000\000\000\000\000\000\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\003\000\004\000\110\000\024\000\025\000\000\000\000\000\000\000\
\062\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\008\000\009\000\
\010\000\011\000\098\000\013\000\099\000\014\000\000\000\015\000\
\000\000\000\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\003\000\004\000\118\000\024\000\
\025\000\000\000\000\000\000\000\067\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\008\000\009\000\010\000\011\000\098\000\013\000\
\099\000\014\000\000\000\015\000\000\000\000\000\000\000\000\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\000\000\000\000\000\000\024\000\025\000\003\000\004\000\046\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\000\000\015\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\003\000\004\000\005\000\024\000\025\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\008\000\
\009\000\010\000\011\000\098\000\013\000\099\000\014\000\000\000\
\015\000\000\000\000\000\000\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\003\000\004\000\110\000\
\024\000\025\000\000\000\000\000\000\000\062\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\000\000\015\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\003\000\004\000\118\000\024\000\025\000\000\000\000\000\
\000\000\067\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\014\000\000\000\
\015\000\000\000\000\000\000\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\003\000\004\000\005\000\
\024\000\025\000\000\000\000\000\176\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\000\000\015\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\003\000\004\000\005\000\024\000\025\000\000\000\095\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\014\000\000\000\
\015\000\000\000\000\000\000\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\003\000\004\000\005\000\
\024\000\025\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\000\000\015\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\090\000\090\000\090\000\024\000\025\000\000\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\090\000\000\000\000\000\090\000\
\090\000\000\000\090\000\090\000\090\000\000\000\090\000\000\000\
\090\000\000\000\000\000\000\000\000\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\003\000\004\000\110\000\
\090\000\090\000\000\000\000\000\000\000\062\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\115\000\000\000\116\000\
\007\000\000\000\000\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\000\000\015\000\000\000\003\000\004\000\
\118\000\000\000\000\000\000\000\000\000\000\000\067\000\000\000\
\006\000\000\000\000\000\000\000\024\000\025\000\123\000\000\000\
\124\000\007\000\000\000\000\000\008\000\009\000\010\000\011\000\
\012\000\013\000\081\000\014\000\000\000\015\000\000\000\000\000\
\000\000\000\000\081\000\081\000\081\000\081\000\081\000\081\000\
\000\000\081\000\081\000\081\000\081\000\024\000\025\000"

let yycheck = "\001\000\
\000\000\024\000\017\000\005\000\025\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\011\001\015\000\004\001\001\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\001\025\000\
\017\001\047\000\025\001\017\001\003\001\019\001\020\001\021\001\
\022\001\025\001\027\001\017\001\029\001\003\001\061\000\021\001\
\022\001\064\000\021\001\022\001\046\000\066\000\018\001\049\000\
\069\000\000\000\052\000\007\001\054\000\009\001\056\000\007\001\
\058\000\009\001\060\000\061\000\013\001\075\000\076\000\027\001\
\066\000\029\001\007\001\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\033\001\034\001\035\001\036\001\007\000\
\010\001\017\001\104\000\019\001\020\001\021\001\022\001\110\000\
\016\000\017\000\010\001\033\001\094\000\116\000\096\000\097\000\
\004\001\118\000\000\000\033\001\034\001\035\001\010\001\124\000\
\004\001\004\001\034\000\006\001\110\000\004\001\038\000\039\000\
\004\001\007\001\006\001\009\001\118\000\000\000\120\000\004\001\
\122\000\004\001\124\000\125\000\014\000\033\001\034\001\035\001\
\036\001\131\000\169\000\133\000\255\255\033\001\034\001\035\001\
\036\001\045\001\046\001\255\255\255\255\255\255\004\001\255\255\
\255\255\045\001\046\001\000\000\010\001\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\255\255\
\088\000\176\000\255\255\165\000\004\001\255\255\168\000\095\000\
\255\255\171\000\255\255\033\001\034\001\035\001\036\001\255\255\
\255\255\017\001\180\000\019\001\020\001\021\001\022\001\045\001\
\046\001\255\255\255\255\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\000\000\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\255\255\032\001\255\255\255\255\255\255\150\000\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\048\001\049\001\004\001\255\255\255\255\255\255\
\255\255\169\000\255\255\255\255\255\255\000\000\255\255\255\255\
\176\000\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\001\001\002\001\003\001\004\001\255\255\255\255\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\048\001\049\001\001\001\002\001\003\001\004\001\255\255\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\000\000\048\001\049\001\001\001\002\001\003\001\004\001\
\255\255\255\255\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\000\000\048\001\049\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\050\001\051\001\052\001\
\053\001\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\048\001\049\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\048\001\049\001\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\255\255\007\001\
\001\001\002\001\003\001\004\001\255\255\045\001\046\001\255\255\
\009\001\017\001\011\001\019\001\020\001\021\001\022\001\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\000\000\048\001\
\049\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\048\001\049\001\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\000\000\048\001\049\001\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\000\000\048\001\049\001\001\001\002\001\003\001\
\004\001\033\001\034\001\035\001\036\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\045\001\046\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\048\001\049\001\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\011\001\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\000\000\048\001\049\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\000\000\048\001\
\049\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\048\001\049\001\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\000\000\048\001\049\001\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\000\000\048\001\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\048\001\049\001\001\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\000\000\048\001\049\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\000\000\048\001\
\049\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\048\001\049\001\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\000\000\048\001\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\048\001\049\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\000\000\048\001\049\001\001\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\000\000\048\001\049\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\000\000\048\001\
\049\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\000\000\
\048\001\049\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\000\000\048\001\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\000\000\255\255\255\255\048\001\049\001\001\001\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\019\001\
\020\001\000\000\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\048\001\049\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\000\000\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\031\001\032\001\000\000\255\255\
\255\255\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\048\001\049\001\001\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\000\000\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\000\000\255\255\255\255\048\001\049\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\000\000\030\001\031\001\032\001\
\255\255\255\255\255\255\000\000\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\048\001\
\049\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\000\000\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\004\001\030\001\031\001\
\032\001\255\255\255\255\010\001\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\004\001\255\255\255\255\255\255\004\001\255\255\010\001\007\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\004\001\019\001\020\001\021\001\022\001\255\255\
\010\001\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\004\001\
\255\255\004\001\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\004\001\
\019\001\020\001\021\001\022\001\255\255\010\001\255\255\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\031\001\255\255\033\001\034\001\035\001\036\001\
\004\001\255\255\255\255\255\255\255\255\255\255\010\001\004\001\
\045\001\046\001\255\255\255\255\255\255\010\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\255\255\031\001\255\255\033\001\034\001\035\001\036\001\
\255\255\045\001\046\001\255\255\255\255\005\000\255\255\007\000\
\045\001\046\001\255\255\003\001\004\001\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\034\000\255\255\255\255\255\255\038\000\039\000\
\031\001\255\255\033\001\034\001\035\001\036\001\046\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\061\000\255\255\255\255\
\255\255\255\255\066\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\255\255\
\088\000\255\255\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\110\000\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\118\000\030\001\
\255\255\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\001\001\002\001\
\003\001\048\001\049\001\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\255\255\032\001\255\255\255\255\
\255\255\169\000\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\001\001\002\001\003\001\048\001\049\001\255\255\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\255\255\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\001\001\002\001\
\003\001\048\001\049\001\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\001\001\002\001\003\001\048\001\049\001\255\255\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\255\255\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\048\001\049\001\001\001\002\001\003\001\255\255\005\001\
\255\255\255\255\255\255\009\001\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\255\255\032\001\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\048\001\049\001\001\001\002\001\003\001\255\255\
\005\001\255\255\255\255\255\255\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\001\001\002\001\003\001\048\001\049\001\255\255\255\255\255\255\
\009\001\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\001\001\002\001\003\001\048\001\
\049\001\255\255\255\255\255\255\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\255\255\048\001\049\001\001\001\002\001\003\001\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\001\001\002\001\003\001\048\001\049\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\001\001\002\001\003\001\
\048\001\049\001\255\255\255\255\255\255\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\001\001\002\001\003\001\048\001\049\001\255\255\255\255\
\255\255\009\001\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\255\255\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\001\001\002\001\003\001\
\048\001\049\001\255\255\255\255\008\001\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\001\001\002\001\003\001\048\001\049\001\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\255\255\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\001\001\002\001\003\001\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\001\001\002\001\003\001\048\001\049\001\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\023\001\
\024\001\255\255\026\001\027\001\028\001\255\255\030\001\255\255\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\001\001\002\001\003\001\
\048\001\049\001\255\255\255\255\255\255\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\255\255\032\001\255\255\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\048\001\049\001\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\004\001\030\001\255\255\032\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\048\001\049\001"

let yynames_const = "\
  FALSE\000\
  TRUE\000\
  LPA\000\
  RPA\000\
  LSB\000\
  RSB\000\
  COM\000\
  SC\000\
  DOT\000\
  QM\000\
  LD\000\
  LESSEQ\000\
  EQ\000\
  LESS\000\
  GTR\000\
  GTREQ\000\
  STAR\000\
  LARROW\000\
  PLUS\000\
  MINUS\000\
  SLASH\000\
  MOD\000\
  F2I\000\
  I2F\000\
  LET\000\
  IN\000\
  NOT\000\
  AND\000\
  OR\000\
  IMPL\000\
  EQUIV\000\
  EX\000\
  FA\000\
  PREV\000\
  NEXT\000\
  EVENTUALLY\000\
  ONCE\000\
  ALWAYS\000\
  PAST_ALWAYS\000\
  SINCE\000\
  UNTIL\000\
  BAR\000\
  FREX\000\
  PREX\000\
  CNT\000\
  MIN\000\
  MAX\000\
  SUM\000\
  AVG\000\
  MED\000\
  END\000\
  EOF\000\
  "

let yynames_block = "\
  STR\000\
  STR_CST\000\
  INT\000\
  RAT\000\
  TU\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : MFOTL.formula) in
    Obj.repr(
# 185 "formula_parser.mly"
                                    ( f "f()"; _2 )
# 1223 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "formula_parser.mly"
                                    ( f "FALSE"; Equal (Cst (Int 0), Cst (Int 1)) )
# 1229 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "formula_parser.mly"
                                    ( f "TRUE"; Equal (Cst (Int 0), Cst (Int 0)) )
# 1235 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'predicate) in
    Obj.repr(
# 188 "formula_parser.mly"
                                    ( f "f(pred)"; _1 )
# 1242 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'predicate) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 190 "formula_parser.mly"
                                    ( f "f(let)"; let Pred p = _2 in Let (p,_4,_6) )
# 1251 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 191 "formula_parser.mly"
                                    ( f "f(eq)"; check (Equal (_1,_3)) )
# 1259 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 192 "formula_parser.mly"
                                    ( f "f(leq)"; check (LessEq (_1,_3)) )
# 1267 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 193 "formula_parser.mly"
                                    ( f "f(less)"; check (Less (_1,_3)) )
# 1275 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 194 "formula_parser.mly"
                                    ( f "f(gtr)"; check (Less (_3,_1)) )
# 1283 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 195 "formula_parser.mly"
                                    ( f "f(geq)"; check (LessEq (_3,_1)) )
# 1291 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 196 "formula_parser.mly"
                                    ( f "f(<=>)"; Equiv (_1,_3) )
# 1299 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 197 "formula_parser.mly"
                                    ( f "f(=>)"; Implies (_1,_3) )
# 1307 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 198 "formula_parser.mly"
                                    ( f "f(or)"; Or (_1,_3) )
# 1315 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 199 "formula_parser.mly"
                                    ( f "f(and)"; And (_1,_3) )
# 1323 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 200 "formula_parser.mly"
                                    ( f "f(not)"; Neg (_2) )
# 1330 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 201 "formula_parser.mly"
                                    ( f "f(ex)"; exists _2 _4 )
# 1338 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 202 "formula_parser.mly"
                                    ( f "f(fa)"; forall _2 _4 )
# 1346 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'aggreg) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 203 "formula_parser.mly"
                                    ( f "f(agg1)"; aggreg _1 _3 _4 [] _5 )
# 1356 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'aggreg) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'varlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 205 "formula_parser.mly"
                                    ( f "f(agg2)"; aggreg _1 _3 _4 _6 _7 )
# 1367 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 206 "formula_parser.mly"
                                    ( f "f(prev)"; Prev (_2,_3) )
# 1375 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 207 "formula_parser.mly"
                                    ( f "f(prevdf)"; Prev (dfintv,_2) )
# 1382 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 208 "formula_parser.mly"
                                    ( f "f(next)"; Next (_2,_3) )
# 1390 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 209 "formula_parser.mly"
                                    ( f "f(nextdf)"; Next (dfintv,_2) )
# 1397 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 210 "formula_parser.mly"
                                    ( f "f(ev)"; Eventually (_2,_3) )
# 1405 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 211 "formula_parser.mly"
                                    ( f "f(evdf)"; Eventually (dfintv,_2) )
# 1412 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 212 "formula_parser.mly"
                                    ( f "f(once)"; Once (_2,_3) )
# 1420 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 213 "formula_parser.mly"
                                    ( f "f(oncedf)"; Once (dfintv,_2) )
# 1427 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 214 "formula_parser.mly"
                                    ( f "f(always)"; Always (_2,_3) )
# 1435 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 215 "formula_parser.mly"
                                    ( f "f(alwaysdf)"; Always (dfintv,_2) )
# 1442 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 216 "formula_parser.mly"
                                    ( f "f(palways)"; PastAlways (_2,_3) )
# 1450 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 217 "formula_parser.mly"
                                    ( f "f(palwaysdf)"; PastAlways (dfintv,_2) )
# 1457 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 218 "formula_parser.mly"
                                    ( f "f(since)"; Since (_3,_1,_4) )
# 1466 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 219 "formula_parser.mly"
                                    ( f "f(sincedf)"; Since (dfintv,_1,_3) )
# 1474 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 220 "formula_parser.mly"
                                    ( f "f(until)"; Until (_3,_1,_4) )
# 1483 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : MFOTL.formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 221 "formula_parser.mly"
                                    ( f "f(untildf)"; Until (dfintv,_1,_3) )
# 1491 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fregex) in
    Obj.repr(
# 223 "formula_parser.mly"
                                     ( f "f(frexd)"; Frex (_2,_3) )
# 1499 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fregex) in
    Obj.repr(
# 224 "formula_parser.mly"
                                     ( f "f(frexdf)"; Frex (dfintv,_2) )
# 1506 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pregex) in
    Obj.repr(
# 225 "formula_parser.mly"
                                     ( f "f(prexd)"; Prex (_2,_3) )
# 1514 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pregex) in
    Obj.repr(
# 226 "formula_parser.mly"
                                     ( f "f(prexdf)"; Prex (dfintv,_2) )
# 1521 "formula_parser.ml"
               : MFOTL.formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fregex) in
    Obj.repr(
# 229 "formula_parser.mly"
                                     ( f "r()"; _2 )
# 1528 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    Obj.repr(
# 230 "formula_parser.mly"
                                     ( f "f(wild)"; Wild )
# 1534 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 231 "formula_parser.mly"
                                     ( f "f(fbase)"; Concat(Test (_1),Wild))
# 1541 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : MFOTL.formula) in
    Obj.repr(
# 232 "formula_parser.mly"
                                     ( f "f(test)"; Test (_1))
# 1548 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fregex) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fregex) in
    Obj.repr(
# 233 "formula_parser.mly"
                                     ( f "f(concat)"; Concat (_1,_2))
# 1556 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fregex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fregex) in
    Obj.repr(
# 234 "formula_parser.mly"
                                     ( f "f(plus)"; Plus (_1, _3))
# 1564 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fregex) in
    Obj.repr(
# 235 "formula_parser.mly"
                                     ( f "f(star)"; Star (_1))
# 1571 "formula_parser.ml"
               : 'fregex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pregex) in
    Obj.repr(
# 238 "formula_parser.mly"
                                     ( f "r()"; _2 )
# 1578 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "formula_parser.mly"
                                     ( f "f(wild)"; Wild )
# 1584 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : MFOTL.formula) in
    Obj.repr(
# 240 "formula_parser.mly"
                                     ( f "f(pbase)"; Concat(Wild,Test (_1)))
# 1591 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : MFOTL.formula) in
    Obj.repr(
# 241 "formula_parser.mly"
                                     ( f "f(test)"; Test (_1))
# 1598 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pregex) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pregex) in
    Obj.repr(
# 242 "formula_parser.mly"
                                     ( f "f(concat)"; Concat (_1,_2))
# 1606 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pregex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pregex) in
    Obj.repr(
# 243 "formula_parser.mly"
                                     ( f "f(plus)"; Plus (_1, _3))
# 1614 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pregex) in
    Obj.repr(
# 244 "formula_parser.mly"
                                     ( f "f(star)"; Star (_1))
# 1621 "formula_parser.ml"
               : 'pregex))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "formula_parser.mly"
                            ( f "agg(cnt)"; Cnt )
# 1627 "formula_parser.ml"
               : 'aggreg))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "formula_parser.mly"
                            ( f "agg(min)"; Min )
# 1633 "formula_parser.ml"
               : 'aggreg))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "formula_parser.mly"
                            ( f "agg(max)"; Max )
# 1639 "formula_parser.ml"
               : 'aggreg))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "formula_parser.mly"
                            ( f "agg(sum)"; Sum )
# 1645 "formula_parser.ml"
               : 'aggreg))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "formula_parser.mly"
                            ( f "agg(avg)"; Avg )
# 1651 "formula_parser.ml"
               : 'aggreg))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "formula_parser.mly"
                            ( f "agg(med)"; Med )
# 1657 "formula_parser.ml"
               : 'aggreg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbound) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rbound) in
    Obj.repr(
# 257 "formula_parser.mly"
                            ( f "interval"; (_1,_3) )
# 1665 "formula_parser.ml"
               : 'interval))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'units) in
    Obj.repr(
# 260 "formula_parser.mly"
                            ( f "opened lbound"; OBnd _2 )
# 1672 "formula_parser.ml"
               : 'lbound))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'units) in
    Obj.repr(
# 261 "formula_parser.mly"
                            ( f "closed lbound"; CBnd _2 )
# 1679 "formula_parser.ml"
               : 'lbound))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'units) in
    Obj.repr(
# 264 "formula_parser.mly"
                            ( f "opened rbound"; OBnd _1 )
# 1686 "formula_parser.ml"
               : 'rbound))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'units) in
    Obj.repr(
# 265 "formula_parser.mly"
                            ( f "closed rbound"; CBnd _1 )
# 1693 "formula_parser.ml"
               : 'rbound))
; (fun __caml_parser_env ->
    Obj.repr(
# 266 "formula_parser.mly"
                            ( f "no bound(1)"; Inf )
# 1699 "formula_parser.ml"
               : 'rbound))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "formula_parser.mly"
                            ( f "no bound(2)"; Inf )
# 1705 "formula_parser.ml"
               : 'rbound))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*char) in
    Obj.repr(
# 270 "formula_parser.mly"
                            ( f "ts";  timeunits _1 )
# 1712 "formula_parser.ml"
               : 'units))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 271 "formula_parser.mly"
                            ( f "int"; _1 )
# 1719 "formula_parser.ml"
               : 'units))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pred) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termlist) in
    Obj.repr(
# 275 "formula_parser.mly"
                            ( f "p()";
                              let p = Predicate.make_predicate (_1,_3) in
                              add_ex p
                            )
# 1730 "formula_parser.ml"
               : 'predicate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 281 "formula_parser.mly"
                            ( f "pred"; _1 )
# 1737 "formula_parser.ml"
               : 'pred))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 285 "formula_parser.mly"
                            ( f "term(plus)"; Plus (_1, _3) )
# 1745 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 286 "formula_parser.mly"
                            ( f "term(minus)"; Minus (_1, _3) )
# 1753 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 287 "formula_parser.mly"
                            ( f "term(mult)"; Mult (_1, _3) )
# 1761 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 288 "formula_parser.mly"
                            ( f "term(div)"; Div (_1, _3) )
# 1769 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 289 "formula_parser.mly"
                            ( f "term(mod)"; Mod (_1, _3) )
# 1777 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 290 "formula_parser.mly"
                            ( f "term(uminus)"; UMinus _2 )
# 1784 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 291 "formula_parser.mly"
                            ( f "term(paren)"; _2 )
# 1791 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 292 "formula_parser.mly"
                            ( f "term(f2i)"; F2i _3 )
# 1798 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 293 "formula_parser.mly"
                            ( f "term(i2f)"; I2f _3 )
# 1805 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cst) in
    Obj.repr(
# 294 "formula_parser.mly"
                            ( f "term(cst)"; Cst _1 )
# 1812 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 295 "formula_parser.mly"
                            ( f "term(var)"; Var _1 )
# 1819 "formula_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 299 "formula_parser.mly"
                            ( f "cst(int)";
                              assert (_1 < float_of_int max_int);
                              assert (_1 > float_of_int min_int);
                              Int (int_of_float _1) )
# 1829 "formula_parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 303 "formula_parser.mly"
                            ( f "cst(rat)"; Float _1 )
# 1836 "formula_parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 304 "formula_parser.mly"
                            ( f "cst(str)"; Str (strip _1) )
# 1843 "formula_parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'termlist) in
    Obj.repr(
# 308 "formula_parser.mly"
                            ( f "termlist(list)"; _1 :: _3 )
# 1851 "formula_parser.ml"
               : 'termlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 309 "formula_parser.mly"
                            ( f "termlist(end)"; [_1] )
# 1858 "formula_parser.ml"
               : 'termlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 310 "formula_parser.mly"
                            ( f "termlist()"; [] )
# 1864 "formula_parser.ml"
               : 'termlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 313 "formula_parser.mly"
                            ( f "varlist(list)"; _1 @ [_3] )
# 1872 "formula_parser.ml"
               : 'varlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 314 "formula_parser.mly"
                            ( f "varlist(end)"; [_1] )
# 1879 "formula_parser.ml"
               : 'varlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 315 "formula_parser.mly"
                            ( f "varlist()"; [] )
# 1885 "formula_parser.ml"
               : 'varlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 318 "formula_parser.mly"
                            ( f "unnamed var"; incr var_cnt; "_" ^ (string_of_int !var_cnt) )
# 1891 "formula_parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 319 "formula_parser.mly"
                            ( f "var"; assert (String.length _1 > 0); _1 )
# 1898 "formula_parser.ml"
               : 'var))
(* Entry formula *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let formula (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : MFOTL.formula)
